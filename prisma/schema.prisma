// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model User{
  id String @unique
  email String
  firstName String
  lastName String
  imageUrl String?
  userName String? @unique
  createdSubreddits Subreddit[]
  createdAt DateTime @default(now())

  posts Post[]
  Vote Vote[]
  Comment Comment[]
  replies   Reply[]
  MentionedInReplies Reply[] @relation("MentionedUser")
  CommentVote CommentVote[]
}


model Subreddit{
  id String @id @default(uuid())
  name String @unique
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User User? @relation(fields: [userId], references: [id])
  userId String?
  
  posts Post[]
}

model Post {
  id String @id @default(uuid())
  title String
  textContent Json?
  imageString String?

  Vote Vote[]
  Comment Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  Subreddit Subreddit? @relation(fields: [subName], references: [name])
  subName String?
  User User? @relation(fields: [userId], references: [id])
  userId String?
}

enum TypeOfVote{
  UP 
  DOWN
}

model Vote{
  id String @id @default(uuid())

  Post Post? @relation(fields: [postId], references: [id])
  postId String

  User User? @relation(fields: [userId], references: [id])
  userId String

  voteType TypeOfVote

}

model CommentVote{
  id String @id @default(uuid())

  User User? @relation(fields: [userId], references: [id])
  userId String

  commentId   String?   
  Comment     Comment?  @relation(fields: [commentId], references: [id])

  voteType TypeOfVote


}

model Comment{
  id String @id @default(uuid())
  text String
  createdAt DateTime @default(now())

  Post Post? @relation(fields: [postId], references: [id])
  postId String

  User User? @relation(fields: [userId], references: [id])
  userId String

  replies   Reply[]
  CommentVote CommentVote[]
}


model Reply {
  id          String    @id @default(uuid())
  text        String
  createdAt   DateTime  @default(now())
  
  // Relationship to User
  userId      String
  User        User      @relation(fields: [userId], references: [id])

  // Relationship to Comment or another Reply
  commentId   String?   // This will be populated if it's a reply to a comment
  Comment     Comment?  @relation(fields: [commentId], references: [id])

  parentId    String?   // This will be populated if it's a reply to another reply
  ParentReply Reply?    @relation("ReplyToReply", fields: [parentId], references: [id])
  Replies     Reply[]   @relation("ReplyToReply")

  mentionedUserId String? // The user being replied to
  MentionedUser    User?  @relation("MentionedUser", fields: [mentionedUserId], references: [id])
}

